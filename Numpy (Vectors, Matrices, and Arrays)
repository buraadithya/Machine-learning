=>> Vector:A quantity having direction as well as magnitude, especially as determining the position of one point in space relative to another.

    Use NumPy to create a one-dimensional array:
    import numpy as np
=>> vector_row = np.array([1, 2, 3]) # To Create a vector as a row
    vector_column = np.array([[1], 
                              [2],
                              [3]]) # To Create a vector as a column

=>> Sparse Matrix:Sparse matrices only store nonzero elements and assume all other values will be zero.
    EX:Netflix
    matrix = np.array([[0, 0],
                       [0, 1],
                       [3, 0]]) # To Create a matrix
    matrix_sparse = sparse.csr_matrix(matrix) # To Create compressed sparse row (CSR) matrix
    print(matrix_sparse)
    Output: (1, 1)	1
            (2, 0)	3
        
=>> matrix = np.array([[1, 2, 3, 4],
                      [5, 6, 7, 8],
                      [9, 10, 11, 12]])
    matrix.shape #To View number of rows and columns
    Output: (3, 4)
    matrix.size #To View number of elements (rows * columns)
    Output: 12
    matrix.ndim #To View number of dimensions
    Output: 2

=>> matrix = np.array([[1, 2, 3],
                       [4, 5, 6],
                       [7, 8, 9]])
    np.max(matrix) # To Return maximum element
    Output: 9
    np.min(matrix) # To Return minimum element
    Output: 1

    np.max(matrix, axis=0) # To Find maximum element in each column
    Output: array([7, 8, 9])

    np.max(matrix, axis=1) # To Find maximum element in each row
    Output: array([3, 6, 9])

=>> np.mean(matrix) # To Return mean
    Output: 5.0
    np.var(matrix) # To Return variance
    Output: 6.666666666666667
    np.std(matrix) # To Return standard deviation
    Output: 2.5819888974716112
    np.mean(matrix, axis=0) # Find the mean value in each column
    Output: array([ 4., 5., 6.])
    matrix.reshape(3, 3) # To Reshape matrix into 2x6 matrix
    Output: array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

=>> One useful argument in reshape is -1, which effectively means “as many as needed,”
    so reshape(-1, 1) means one row and as "many columns as needed".              
    matrix.reshape(1,-1)
    Output: array([[ 1, 2, 3, 4, 5, 6, 7, 8, 9,]])
=>> Finally, if we provide one integer, reshape will return a '1D array' of that length:
    matrix.reshape(12)
    array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])

=>> matrix.T # To Return Transpose matrix
    Output: array([[1, 4, 7],
               [2, 5, 8],
               [3, 6, 9]])

=>> np.array([[1, 2, 3, 4, 5, 6]]).T # To Return Tranpose row vector
    Output: array([[1],
                  [2],
                  [3],
                  [4],
                  [5],
                  [6]])
               
    matrix.flatten() # To Return Flatten matrix (Into one-dimensional array)
    Output: array([1, 2, 3, 4, 5, 6, 7, 8, 9])    

=>> matrix = np.array([[1, 1, 1],
                      [1, 1, 10],
                      [1, 1, 15]])
   np.linalg.matrix_rank(matrix) # To Find the Rank of a Matrix
   Output: 2
               
=>> matrix = np.array([[1, 2, 3],
                       [2, 4, 6],
                       [3, 8, 9]])
    np.linalg.det(matrix) # To Calculate the Determinant of a matrix
    Output: 0.0 

    matrix.diagonal() # To Return diagonal elements
    Output: array([1, 4, 9])

    matrix.diagonal(offset=1) # To Return diagonal one above the main diagonal
    Output: array([2, 6])

    matrix.diagonal(offset=-1) # To Return diagonal one below the main diagonal
    Output: array([2, 8])

    matrix.trace() or sum(matrix.diagonal()) # To calculate the trace of a matrix(sum of diagonal elements in a matrix)
    Output: 14

=>> matrix = np.array([[1, -1, 3],
                       [1, 1, 6],
                       [3, 8, 9]])
     eigenvalues, eigenvectors = np.linalg.eig(matrix) # To Calculate eigenvalues and eigenvectors(Av = λv)
     print(eigenvalues)
     print(eigenvectors)
     Output: [13.55075847  0.74003145 -3.29078992]
     Output: [[-0.17622017 -0.96677403 -0.53373322]
              [-0.435951    0.2053623  -0.64324848]
              [-0.88254925  0.15223105  0.54896288]]
	 

=>> vector_a = np.array([1,2,3]) # Create two vectors
    vector_b = np.array([4,5,6])                          n
    np.dot(vector_a, vector_b) # To Calculate dot product(Σ aibi)
                                                         i=1
    Output: 32

=>> np.add(matrix_a, matrix_b) or (matrix_a + matrix_b) # To Add two matrices
    np.subtract(matrix_a, matrix_b) # To Subtract two matrices
    np.dot(matrix_a, matrix_b) # To Multiply two matrices	 
=>> In Python 3.5+ we can use the @ operator: matrix_a @ matrix_b # To Multiply two matrices
    matrix_a * matrix_b # To Multiply two matrices element-wise
                                                             
=>> np.linalg.inv(matrix) # To Calculate inverse of matrix(AA-1= I)
    matrix @ np.linalg.inv(matrix) # To Multiply matrix and its inverse
    
=>> np.random.seed(0) # To Set seed (The seed value is the previous value number generated by the generator)
    np.random.randint(0, 11, 3) # # To Generate three random integers between 1 and 10
    np.random.normal(0.0, 1.0, 3) # Draw three numbers from a normal distribution with mean 0.0 and standard deviation of 1.0
    np.random.logistic(0.0, 1.0, 3) # To Draw three numbers from a logistic distribution with mean 0.0 and scale of 1.0
    np.random.uniform(1.0, 2.0, 3) # To Draw three numbers greater than or equal to 1.0 and less than 2.0

							 
